{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"easy.qmldir for Qbs","text":"<p>Never write a <code>qmldir</code> file manually again! This Qbs module generates it automatically.</p>"},{"location":"#features","title":"Features","text":"<ol> <li>(Almost) full support of every kind of declaration for Module Definition <code>qmldir</code> Files.</li> <li>Automatic listing of QML objects and JS resources.</li> <li>Detection of singletons via <code>pragma Singleton</code>.</li> </ol>"},{"location":"#example","title":"Example","text":"my-plugin.qbs<pre><code>DynamicLibrary {\n    Depends { name: 'Qt.qml' }\n    Depends { name: 'easy.qmldir' }  // depend on the module\n\n    name: 'mega-controls-plugin'\n\n    files: ['src/plugin.h']\n\n    Group {\n        name: 'QML files'\n        files: [\n            'qml/Button.qml',\n            'qml/Slider.qml',\n            'qml/Toggle.qml',\n        ]\n\n        fileTags: ['easy.qmldir.inputs']  // tag your QML or JavaScript files\n    }\n\n    Qt.qml.importName: 'mega.controls'\n    Qt.qml.importVersion: '2.0'\n\n    easy.qmldir.classname: 'mega::ControlsPlugin'  // optionally, specify the class name\n\n    // other qmldir facilities are also available (see below)\n}\n</code></pre> <p>This will produce the following <code>qmldir</code> file: <pre><code>module mega.controls\nplugin mega-controls-plugin\nclassname mega::ControlsPlugin\ntypeinfo plugins.qmltypes\n\nButton 2.0 Button.qml\nSlider 2.0 Slider.qml\nToggle 2.0 Toggle.qml\n</code></pre></p>"},{"location":"#looking-for-more","title":"Looking for more?","text":"<p>Check the <code>example</code> folder or simply run this from the repository\u2019s root:</p> <pre><code>qbs run\n</code></pre>"},{"location":"#documentation","title":"Documentation","text":"<p>Check the documentation for installation and configuration guides.</p>"},{"location":"development/","title":"Development","text":""},{"location":"development/#writing-documentation","title":"Writing documentation","text":"<p>For this documentation, I use Material for MkDocs. You'll need a working Python interpreter to use it.</p> <p>Assuming that you have it, first install the MkDocs:</p> macOS / LinuxWindows <pre><code>pip3 install mkdocs-material\n</code></pre> <pre><code>pip install mkdocs-material\n</code></pre> <p>Then, to run the documentation site locally, you can use:</p> <pre><code>mkdocs serve\n</code></pre> <p>For the rest of features, check their documentation.</p>"},{"location":"getting-started/installation/","title":"Installation","text":"<p>Already installed the module?</p> <p>Skip to the next article.</p>"},{"location":"getting-started/installation/#prerequisites","title":"Prerequisites","text":""},{"location":"getting-started/installation/#qbs","title":"Qbs","text":"<p>Please, check the official guide.</p>"},{"location":"getting-started/installation/#qt","title":"Qt","text":"<p>This is obvious. Otherwise, you wouldn't need the module at all.</p>"},{"location":"getting-started/installation/#download","title":"Download","text":""},{"location":"getting-started/installation/#via-git","title":"via Git","text":"HTTPSSSH <pre><code>git clone https://github.com/easyQML/easy.qmldir.qbs.git\n</code></pre> <pre><code>git clone git@github.com:easyQML/easy.qmldir.qbs.git\n</code></pre>"},{"location":"getting-started/installation/#as-archive","title":"as archive","text":"<p>Download zip</p>"},{"location":"getting-started/installation/#add-to-your-project","title":"Add to your project","text":"<p>As you would do with any other 3rdParty module, just add the search path to your project's root <code>qbs</code>-file:</p> <pre><code>import qbs\n\nProject {\n    qbsSearchPaths: [\n        '&lt;path/to/easy.qmldir.qbs/root/folder&gt;'\n    ]\n\n    // ...\n}\n</code></pre>"},{"location":"getting-started/installation/#use-in-qbs","title":"Use in Qbs","text":"<p>Done with installation?</p> <p>Congrats! Now, you no longer need to write your module definitions by hand. Learn how to control the resulting <code>qmldir</code> in the next chapter.</p>"},{"location":"getting-started/usage/","title":"Usage in Qbs","text":"<p>Here is a short example. Click on  to see the explanation.</p> example/example.qbs<pre><code>import qbs.FileInfo\n\nimport easy as Easy  // (1)!\n\nCppApplication {\n    Depends {\n        name: 'Qt'\n        submodules: ['core', 'gui', 'qml', 'quick']\n        versionAtLeast: '6.5'\n    }\n\n    Depends { name: 'easy.qmldir' }  // (2)!\n\n    name: 'easy-qmldir-qml-example'\n\n    Qt.qml.importName: 'easy.qmldir.example'  // (3)!\n    Qt.qml.importVersion: '1.0'               // (4)!\n\n    easy.qmldir.plugin: undefined  // (5)!\n\n    Group {\n        name: 'C++ files'\n        prefix: 'src/'\n        files: ['**/*.cpp', '**/*.hpp']\n    }\n\n    Group {\n        name: 'QML files'\n        files: ['**']\n        prefix: 'qml/'\n        Qt.core.resourceSourceBase: 'qml/'\n        Qt.core.resourcePrefix: '/qt/qml/'\n        fileTags: [\n            'qt.core.resource_data',  // (6)!\n            'easy.qmldir.inputs'      // (7)!\n        ]\n    }\n\n    Easy.Qmldir {  // (8)!\n        Qt.core.resourcePrefix: '/qt/qml/easy/qmldir/example/'\n        fileTags: ['qt.core.resource_data']\n    }\n}\n</code></pre> <ol> <li>Import <code>easy</code> items under some name. I prefer <code>Easy</code>.</li> <li>Add a dependency on the <code>easy.qmldir</code> module in your product.</li> <li>Don't forget to set the module name via <code>Qt.qml.importName</code>.</li> <li>Set the module version using <code>Qt.qml.importVersion</code>.</li> <li>In this case, the product is not a QML engine extension but an application, so there is no plugin. Disable generation by setting it to <code>undefined</code>.</li> <li>Tag with <code>qt.core.resource_data</code> to pack QML-files into Qt resources.</li> <li>Tag with <code>easy.qmldir.inputs</code> to list the QML-files in the generated <code>qmldir</code>.</li> <li>You can use <code>easy.Qmldir</code> item to easily grab the generated <code>qmldir</code> for further packing into resources (like here) or, for example, for installation via <code>qbs.install: true</code>.</li> </ol> <p>You can run this example yourself! Just go to the module\u2019s root folder and execute: <pre><code>qbs run\n</code></pre></p>"},{"location":"getting-started/usage/#output","title":"Output","text":"<p>The resulting <code>qmldir</code> looks like this:</p> qmldir<pre><code>module easy.qmldir.example\ntypeinfo plugins.qmltypes\n\nsingleton Global 1.0 Global.qml\nMain 1.0 Main.qml\n</code></pre>"},{"location":"reference/","title":"easy.qmldir","text":"<p>Provides facilities to generate Module Definition <code>qmldir</code> Files automatically.</p>"},{"location":"reference/#properties","title":"Properties","text":"<ul> <li><code>module</code>: <code>string</code></li> <li><code>moduleVersion</code>: <code>string</code></li> <li><code>optionalPlugin</code>: <code>bool</code></li> <li><code>plugin</code>: <code>string</code></li> <li><code>pluginPath</code>: <code>string</code></li> <li><code>classname</code>: <code>string</code></li> <li><code>typeinfo</code>: <code>string</code></li> <li><code>depends</code>: <code>stringList</code></li> <li><code>imports</code>: <code>stringList</code></li> <li><code>designersupported</code>: <code>bool</code></li> <li><code>prefer</code>: <code>string</code></li> </ul>"},{"location":"reference/#detailed-description","title":"Detailed Description","text":"<p>This module takes away the burden of manually writing <code>qmldir</code> files for your QML modules. It lists all the files it knows, tagged with an input tag, in the Module Definition File, and provides the ability to set values for other fields in that file.</p>"},{"location":"reference/#file-tags","title":"File Tags","text":""},{"location":"reference/#input","title":"Input","text":"Tag Auto-tagged patterns Description easy.qmldir.inputs <code>*.qml</code>, <code>*.js</code>, <code>*.mjs</code> Tag your files with it to list them in <code>qmldir</code>"},{"location":"reference/#output","title":"Output","text":"Tag Description easy.qmldir.qmldir The generated <code>qmldir</code> module definition file"},{"location":"reference/#property-documentation","title":"Property Documentation","text":""},{"location":"reference/#module","title":"<code>module</code>","text":"<p>Declares the module identifier of the QML module using the dotted URI notation. It must match the module\u2019s install path. For example:</p> <pre><code>easy.qmldir.module: 'org.example'\n</code></pre> <p>Default: <code>Qt.qml.importName</code> (from the product)</p>"},{"location":"reference/#moduleversion","title":"<code>moduleVersion</code>","text":"<p>The version of the format <code>'x.y'</code> which will be used to generate object type declarations and JavaScript resource declarations. For example:</p> <pre><code>easy.qmldir.moduleVersion: '1.0'\n</code></pre> Declaring different versions of the same component? <p>Currently, <code>easy.qmldir</code> is not able to list objects with different versions in the resulting <code>qmldir</code>, but that maybe changed in future. If you need this, submit an idea!</p> <p>Default: <code>Qt.qml.importVersion</code> (from the product)</p>"},{"location":"reference/#optionalplugin","title":"<code>optionalPlugin</code>","text":"<p>Denotes that the plugin declaration should be optional, i.e., the plugin itself does not contain any relevant code and only serves to load a library it links to. If given, and if any types for the QML module are already available, indicating that the library has been loaded by some other means, QML engine will not load the plugin.</p> <p>Default: <code>false</code></p>"},{"location":"reference/#plugin","title":"<code>plugin</code>","text":"<p>Plugin library name. It should match the product name, so usually you don\u2019t need to change it.</p> <p>Default: <code>product.name</code></p>"},{"location":"reference/#pluginpath","title":"<code>pluginPath</code>","text":"<p>An optional path for plugin declaration. It\u2019s either:</p> <ul> <li>an absolute path to the directory containing the plugin file, or</li> <li>a relative path from the directory containing the qmldir file to the directory containing the plugin file.</li> </ul> <p>You need to specify this only if the compiled plugin binary and the corresponding <code>qmldir</code> are located in different directories.</p> <p>Default: <code>undefined</code></p>"},{"location":"reference/#classname","title":"<code>classname</code>","text":"<p>The class name of the C++ plugin used by the QML module to generate a plugin classname declaration. It can contain namespaces, too. For example:</p> <pre><code>easy.qmldir.classname: 'my::widgets::UiPlugin'\n</code></pre> <p>Default: <code>undefined</code></p>"},{"location":"reference/#typeinfo","title":"<code>typeinfo</code>","text":"<p>Path to the <code>*.qmltypes</code> file to generate a type description file declaration. Usually, it stays unchanged.</p> <p>Default: <code>'plugins.qmltypes'</code></p>"},{"location":"reference/#depends","title":"<code>depends</code>","text":"<p>List of QML module that the current module depends on. It generates module dependencies declarations that are rarely needed but sometimes come in handy. Each item in the list must have the format <code>&lt;ModuleIdentifier&gt; &lt;Version&gt;</code>. For example:</p> <pre><code>easy.qmldir.depends: [\n    'MyOtherModule 1.0',\n    'org.example.config 2.0',\n]\n</code></pre> <p>Default: <code>[]</code></p>"},{"location":"reference/#imports","title":"<code>imports</code>","text":"<p>List of QML modules that are automatically imported by the engine when you import the current QML module. Each item in the list will generate a module import declaration.</p> <p>This can be used if you want to extend another module with some new components (or even to override existing ones) but don't want to import both modules everywhere. For example:</p> <pre><code>easy.qmldir.imports: [\n    'QtQuick.Controls',\n    'QtQuick.Layouts',\n]\n</code></pre> <p>Optionally, you can specify the version of each module like this:</p> <pre><code>easy.qmldir.imports: [\n    'QtQuick.Controls 2.15',\n    'QtQuick.Layouts 1.15',\n]\n</code></pre> <p>You can also use <code>auto</code> instead of the version. It means the engine will use the same version as your module\u2019s one. For example, you have a module <code>mega.controls.future</code> that extends another module <code>mega.controls</code> (and you want to re-export it):</p> <pre><code>easy.qmldir.imports: [\n    'mega.controls auto'\n]\n</code></pre> <p>Now if your <code>mega.controls.future</code> has a version <code>1.0</code>, it will try to <code>import mega.controls 1.0</code>. And if your module is <code>2.2</code>, then it will <code>import mega.controls 2.2</code>, and so on.</p> Looking for <code>optional</code> imports? <p>Qt supports <code>optional</code> and <code>default</code> imports. For instance, they use them in their <code>QtQuick.Controls</code> as following:</p> QtQuick/Controls/qmldir<pre><code>module QtQuick.Controls\nlinktarget Qt6::qtquickcontrols2plugin\nplugin qtquickcontrols2plugin\nclassname QtQuickControls2Plugin\ndesignersupported\ntypeinfo plugins.qmltypes\noptional import QtQuick.Controls.Fusion auto\noptional import QtQuick.Controls.Material auto\noptional import QtQuick.Controls.Imagine auto\noptional import QtQuick.Controls.Universal auto\noptional import QtQuick.Controls.Windows auto\noptional import QtQuick.Controls.macOS auto\noptional import QtQuick.Controls.iOS auto\ndefault import QtQuick.Controls.Basic auto\nprefer :/qt-project.org/imports/QtQuick/Controls/\n</code></pre> <p>The <code>easy.qmldir</code>, however, does not support this functionality yet. If you need it, submit an idea!</p> <p>Default: <code>[]</code></p>"},{"location":"reference/#designersupported","title":"<code>designersupported</code>","text":"<p>Set this property to <code>true</code> if the plugin is supported by Qt Quick Designer.</p> <p>Default: <code>false</code></p>"},{"location":"reference/#prefer","title":"<code>prefer</code>","text":"<p>The path to be used for preferred path declaration. For example:</p> <pre><code>easy.qmldir.prefer: ':/qt/qml/org/example/'\n</code></pre> <p>This is useful when your plugin is distributed as a dynamic library, but QML-files are packed into resources instead of distributing them along with the plugin.</p> <p>Default: <code>undefined</code></p>"},{"location":"reference/easy-qmldir-item/","title":"easy.Qmldir","text":"<p>Allows to easily match the <code>qmldir</code> file generated by the module. More\u2026</p> <p>Inherits <code>Group</code></p>"},{"location":"reference/easy-qmldir-item/#detailed-description","title":"Detailed Description","text":"<p>This item allows you to use the output of the module as an input for further rules.</p> Internals <p>Essentially, it\u2019s just a <code>Group</code> that matches files with the output tag:</p> <pre><code>Group {\n    fileTagsFilter: ['easy.qmldir.qmldir']\n}\n</code></pre> <p>Just import the <code>easy</code> items first: <pre><code>import easy as Easy\n</code></pre></p> <p>Then you can use it to pack your <code>qmldir</code> to resources like this:</p> <pre><code>Easy.Qmldir {\n    Qt.core.resourcePrefix: '/qt/qml/easy/qmldir/example/'\n    fileTags: ['qt.core.resource_data']\n}\n</code></pre> <p>Or you can use it to install a <code>qmldir</code> into some specific folder:</p> <pre><code>Easy.Qmldir {\n    qbs.install: true\n    qbs.installPrefix: 'HelloWorld.app/Contents/Imports/org/example/'\n}\n</code></pre>"}]}